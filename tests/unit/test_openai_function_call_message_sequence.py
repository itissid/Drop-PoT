"""
Two modes:
1. G: Messages are being generated and sent for the first time to the AI.
2. R: Messages are being replayed(like if the last communication was in error)
or we communicate with in loop human Difference is in serialization and sending
these messages to the AI.

Notation:
S = Sytem message
U_i = ith(User) message with or without function calling requested.
U_i' = ith(User) message for replay, never sent with the function call argument
        that was/wasn't originally in U_i
A_j = jth(AI) message
A_j' = jth(AI) message for replay, sent to the AI with "function_call": {"name":
        ..., "arguments":...} format and null "content" key 
F_k = kth(Function call) message(generated only in R mode) and only if function was called by AI

Valid Test Scenarios:

Scenario 1: First time. Replay due to error.
G/R:                                     S -> U_i
Messages for OpenAI:                     S -> U_i # Generated by the 
                                                    EventNode.context_to_openai_api_messages 
Message returned by OpenAI appended:     S -> U_i -> A_i+1
Messages saved to disk                   S -> U_i -> A_i+1


Scenario 2.0: Replay old messages when in the AI message there is a function
call is requested but there was an error.
This raises a ValueError that needs to be handled
X:                                     S -> U_i -> A_i+1  # Original sequence from disk 
                                                            is S -> U_i -> A_i+1

Scenario 2.1:     
X:                                     S -> U_i  -> A_i+1 -> U_i+2 #
Throw an exception if A_i+1 has a function call. 


Scenario 2.2: Same as 2.1 but no function call is requested(simpler than 2.1)
R:                                     S -> U_i -> A_i+1 -> U_i+2
Messages for OpenAI:                   S -> U_i -> A_i+1 -> U_i+2 # No fn call Generated 
                                                                    by the EventNode.context_to_openai_api_messages 
Message returned from OpenAI appended: S -> U_i -> A_i+1 -> U_i+2 -> A_i+3
Messages saved to disk:                S -> U_i -> A_i+1 -> U_i+2 -> A_i+3

Scenario 2.3: Replay old messages. Human in loop. 
R:                                     S -> U_i  -> A_i+1  -> F_i+2   # Original sequence from disk is S -> U_i -> A_i+1 
Messages for OpenAI:                   S -> U_i' -> A_i+1' -> F_i+2*  # Generated by the 
                                                                        EventNode.context_to_openai_api_messages 
Message returned from OpenAI appended: S -> U_i' -> A_i+1' -> F_i+2* 
Messages saved to disk:                S -> U_i  -> A_i+1  -> F_i+2* -> U_i+3  -> A_i+4

Thus (U_j -> A_j+i)+ is a closure allowing us to process events in that sequence there in.


* Assuming function was called by A_k previously.
(TBD: What is saved on the disk? Should it be the actual messages we generated.
Currently the messages saved to disk are used to )
"""

import json
import unittest

from drop_backend.model.ai_conv_types import (
    AIFunctionCall,
    EventNode,
    MessageNode,
    OpenAIFunctionCallSpec,
    Role,
    UserExplicitFunctionCall,
)


class TestMessageNode(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.maxDiff = None

    def test_scenario_1(self):
        input_messages = [
            MessageNode(
                role=Role.system,
                message_content="You are an helpful AI assistant who can help me get the weather.",
            ),
            MessageNode(
                role=Role.user,
                message_content="What's the weather like in Boston?",
                functions=[
                    OpenAIFunctionCallSpec(
                        **{  # type: ignore
                            "name": "get_current_weather",
                            "description": "Get weather",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "location": {
                                        "type": "string",
                                        "description": "The city and state, e.g. San Francisco, CA",
                                    },
                                    "unit": {
                                        "type": "string",
                                        "enum": ["celsius", "fahrenheit"],
                                    },
                                },
                                "required": ["location"],
                            },
                        }
                    )
                ],
                explicit_fn_call=UserExplicitFunctionCall(
                    **{"name": "get_current_weather"}
                ),
            ),
        ]

        expected_output = [
            {
                "role": "system",
                "content": "You are an helpful AI assistant who can help me get the weather.",
            },
            {
                "role": "user",
                "content": "What's the weather like in Boston?",
                "functions": [
                    {
                        "name": "get_current_weather",
                        "description": "Get weather",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "location": {
                                    "type": "string",
                                    "description": "The city and state, e.g. San Francisco, CA",
                                },
                                "unit": {
                                    "type": "string",
                                    "enum": ["celsius", "fahrenheit"],
                                },
                            },
                            "required": ["location"],
                        },
                    }
                ],
                "explicit_fn_call": {"name": "get_current_weather"},
            },
        ]
        self._run_test(input_messages, expected_output)

    def test_scenario_2_0(self):
        # ... [Your test code for scenario 2.0 here] ...

        input_messages = [
            MessageNode(
                role=Role.system,
                message_content="You are an helpful AI assistant.",
            ),
            MessageNode(
                role=Role.user,
                message_content="What's the weather like in Boston?",
                functions=[
                    OpenAIFunctionCallSpec(
                        **{  # type: ignore
                            "name": "get_current_weather",
                            "description": "Get weather",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "location": {
                                        "type": "string",
                                        "description": "The city and state, e.g. San Francisco, CA",
                                    },
                                    "unit": {
                                        "type": "string",
                                        "enum": ["celsius", "fahrenheit"],
                                    },
                                },
                                "required": ["location"],
                            },
                        }
                    )
                ],
                explicit_fn_call=UserExplicitFunctionCall(
                    **{"name": "get_current_weather"}
                ),
            ),
            MessageNode(
                role=Role.assistant,
                ai_function_call=AIFunctionCall(
                    name="get_current_weather",
                    arguments=json.dumps(  # type: ignore
                        {"location": "Boston, MA", "unit": "fahrenheit"}
                    ),
                ),
            ),
        ]
        with self.assertRaisesRegex(
            ValueError,
            "^Function call request to AI without a function result.*",
        ):
            self._run_test(input_messages, None)

    def test_scenario_2_1(self):
        # ... [Your test code for scenario 2.1 here] ...
        input_messages = [
            MessageNode(
                role=Role.system,
                message_content="You are an helpful AI assistant.",
            ),
            MessageNode(
                role=Role.user,
                message_content="What's the weather like in Boston?",
                functions=[
                    OpenAIFunctionCallSpec(
                        **{  # type: ignore
                            "name": "get_current_weather",
                            "description": "Get weather",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "location": {
                                        "type": "string",
                                        "description": "The city and state, e.g. San Francisco, CA",
                                    },
                                    "unit": {
                                        "type": "string",
                                        "enum": ["celsius", "fahrenheit"],
                                    },
                                },
                                "required": ["location"],
                            },
                        }
                    )
                ],
                explicit_fn_call={"name": "get_current_weather"},  # type: ignore
            ),
            MessageNode(
                role=Role.assistant,
                ai_function_call=AIFunctionCall(
                    name="get_current_weather",
                    arguments=json.dumps(  # type: ignore
                        {"location": "Boston, MA", "unit": "fahrenheit"}
                    ),
                ),
            ),
            MessageNode(
                role=Role.user,
                message_content="Thanks for your response",
            ),
        ]
        with self.assertRaisesRegex(
            ValueError,
            "^Function call request to AI without a function result.*",
        ):
            self._run_test(input_messages, None)

    def test_scenario_2_2(self):
        input_messages = [
            MessageNode(
                role=Role.system,
                message_content="You are an helpful AI assistant.",
            ),
            MessageNode(
                role=Role.user,
                message_content="What's the climate like in Boston in July?",
            ),
            MessageNode(
                role=Role.assistant,
                message_content="I dunno you tell me :)",
            ),
            MessageNode(
                role=Role.user,
                message_content="That was snarky",
            ),
        ]
        expected_output = [
            {
                "role": "system",
                "content": "You are an helpful AI assistant.",
            },
            {
                "role": "user",
                "content": "What's the climate like in Boston in July?",
            },
            {
                "role": "assistant",
                "content": "I dunno you tell me :)",
            },
            {
                "role": "user",
                "content": "That was snarky",
            },
        ]
        self._run_test(input_messages, expected_output)

    def test_scenario_2_3(self):
        input_messages = [
            MessageNode(
                role=Role.system,
                message_content="You are an helpful AI assistant.",
            ),
            MessageNode(
                role=Role.user,
                message_content="What's the weather like in Boston?",
                functions=[
                    OpenAIFunctionCallSpec(
                        **{  # type: ignore
                            "name": "get_current_weather",
                            "description": "Get weather",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "location": {
                                        "type": "string",
                                        "description": "The city and state, e.g. San Francisco, CA",
                                    },
                                    "unit": {
                                        "type": "string",
                                        "enum": ["celsius", "fahrenheit"],
                                    },
                                },
                                "required": ["location"],
                            },
                        }
                    )
                ],
                explicit_fn_call=UserExplicitFunctionCall(
                    **{"name": "get_current_weather"}
                ),
            ),
            MessageNode(
                role=Role.assistant,
                ai_function_call=AIFunctionCall(
                    name="get_current_weather",
                    arguments=json.dumps(  # type: ignore
                        {"location": "Boston, MA", "unit": "fahrenheit"}
                    ),
                ),
            ),
            MessageNode(
                role=Role.function,
                ai_function_call_result=json.dumps(
                    {"temperature": "70", "unit": "fahrenheit"}
                ),
                ai_function_call_result_name="get_current_weather",
            ),
            MessageNode(
                role=Role.user,
                message_content="Thanks for your response",
            ),
        ]
        expected_output = [
            {
                "role": "system",
                "content": "You are an helpful AI assistant.",
            },
            {
                "role": "user",
                "content": "What's the weather like in Boston?",
            },
            {
                "role": "assistant",
                "content": None,
                "function_call": {
                    "name": "get_current_weather",
                    "arguments": json.dumps(
                        {"location": "Boston, MA", "unit": "fahrenheit"}
                    ),
                },
            },
            {
                "role": "function",
                "name": "get_current_weather",
                "content": json.dumps(
                    {"temperature": "70", "unit": "fahrenheit"}
                ),
            },
            {
                "role": "user",
                "content": "Thanks for your response",
            },
        ]
        self._run_test(input_messages, expected_output)

    def _run_test(self, input_messages, expected_output):
        result = list(EventNode.context_to_openai_api_messages(input_messages))
        self.assertEqual(result, expected_output)
